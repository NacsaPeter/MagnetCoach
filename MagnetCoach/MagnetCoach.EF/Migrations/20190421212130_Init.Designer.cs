// <auto-generated />
using System;
using MagnetCoach.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MagnetCoach.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190421212130_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MagnetCoach.Domain.Models.Ball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("Size");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("Balls");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NumberColor");

                    b.Property<string>("ShirtColor");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NumberColor = "White",
                            ShirtColor = "Red"
                        },
                        new
                        {
                            Id = 2,
                            NumberColor = "White",
                            ShirtColor = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            NumberColor = "White",
                            ShirtColor = "Green"
                        },
                        new
                        {
                            Id = 4,
                            NumberColor = "Black",
                            ShirtColor = "Yellow"
                        },
                        new
                        {
                            Id = 5,
                            NumberColor = "White",
                            ShirtColor = "Purple"
                        },
                        new
                        {
                            Id = 6,
                            NumberColor = "Black",
                            ShirtColor = "White"
                        },
                        new
                        {
                            Id = 7,
                            NumberColor = "White",
                            ShirtColor = "Black"
                        },
                        new
                        {
                            Id = 8,
                            NumberColor = "White",
                            ShirtColor = "Orange"
                        },
                        new
                        {
                            Id = 9,
                            NumberColor = "White",
                            ShirtColor = "Brown"
                        },
                        new
                        {
                            Id = 10,
                            NumberColor = "Black",
                            ShirtColor = "Pink"
                        });
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Formation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Formations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "4-4-2",
                            SportId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "4-3-3",
                            SportId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "6",
                            SportId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "5-1",
                            SportId = 2
                        });
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.FormationLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormationId");

                    b.Property<int>("NumberOfPlayers");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("FormationId");

                    b.ToTable("FormationLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormationId = 1,
                            NumberOfPlayers = 1,
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            FormationId = 1,
                            NumberOfPlayers = 4,
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            FormationId = 1,
                            NumberOfPlayers = 4,
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            FormationId = 1,
                            NumberOfPlayers = 2,
                            Order = 4
                        },
                        new
                        {
                            Id = 5,
                            FormationId = 2,
                            NumberOfPlayers = 1,
                            Order = 1
                        },
                        new
                        {
                            Id = 6,
                            FormationId = 2,
                            NumberOfPlayers = 4,
                            Order = 2
                        },
                        new
                        {
                            Id = 7,
                            FormationId = 2,
                            NumberOfPlayers = 3,
                            Order = 3
                        },
                        new
                        {
                            Id = 8,
                            FormationId = 2,
                            NumberOfPlayers = 3,
                            Order = 4
                        },
                        new
                        {
                            Id = 9,
                            FormationId = 3,
                            NumberOfPlayers = 1,
                            Order = 1
                        },
                        new
                        {
                            Id = 10,
                            FormationId = 3,
                            NumberOfPlayers = 6,
                            Order = 2
                        },
                        new
                        {
                            Id = 11,
                            FormationId = 3,
                            NumberOfPlayers = 0,
                            Order = 3
                        },
                        new
                        {
                            Id = 12,
                            FormationId = 3,
                            NumberOfPlayers = 0,
                            Order = 4
                        },
                        new
                        {
                            Id = 13,
                            FormationId = 4,
                            NumberOfPlayers = 1,
                            Order = 1
                        },
                        new
                        {
                            Id = 14,
                            FormationId = 4,
                            NumberOfPlayers = 5,
                            Order = 2
                        },
                        new
                        {
                            Id = 15,
                            FormationId = 4,
                            NumberOfPlayers = 1,
                            Order = 3
                        },
                        new
                        {
                            Id = 16,
                            FormationId = 4,
                            NumberOfPlayers = 0,
                            Order = 4
                        });
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Frame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BallId");

                    b.Property<string>("Details");

                    b.Property<int?>("OpponentTeamId");

                    b.Property<int>("Order");

                    b.Property<int?>("OwnTeamId");

                    b.Property<int>("TacticId");

                    b.HasKey("Id");

                    b.HasIndex("BallId");

                    b.HasIndex("OpponentTeamId");

                    b.HasIndex("OwnTeamId");

                    b.HasIndex("TacticId");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasEmptyGoal");

                    b.Property<bool>("HasGoalkeeper");

                    b.Property<int>("MaxPlayers");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasEmptyGoal = false,
                            HasGoalkeeper = true,
                            MaxPlayers = 11,
                            Name = "Football"
                        },
                        new
                        {
                            Id = 2,
                            HasEmptyGoal = true,
                            HasGoalkeeper = true,
                            MaxPlayers = 7,
                            Name = "Handball"
                        },
                        new
                        {
                            Id = 3,
                            HasEmptyGoal = false,
                            HasGoalkeeper = false,
                            MaxPlayers = 5,
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = 4,
                            HasEmptyGoal = true,
                            HasGoalkeeper = true,
                            MaxPlayers = 6,
                            Name = "Ice Hockey"
                        },
                        new
                        {
                            Id = 5,
                            HasEmptyGoal = false,
                            HasGoalkeeper = false,
                            MaxPlayers = 11,
                            Name = "American Football"
                        },
                        new
                        {
                            Id = 6,
                            HasEmptyGoal = false,
                            HasGoalkeeper = true,
                            MaxPlayers = 5,
                            Name = "Futsal"
                        },
                        new
                        {
                            Id = 7,
                            HasEmptyGoal = true,
                            HasGoalkeeper = true,
                            MaxPlayers = 6,
                            Name = "Floorball"
                        },
                        new
                        {
                            Id = 8,
                            HasEmptyGoal = false,
                            HasGoalkeeper = false,
                            MaxPlayers = 15,
                            Name = "Rugby"
                        },
                        new
                        {
                            Id = 9,
                            HasEmptyGoal = false,
                            HasGoalkeeper = true,
                            MaxPlayers = 7,
                            Name = "Waterpolo"
                        },
                        new
                        {
                            Id = 10,
                            HasEmptyGoal = false,
                            HasGoalkeeper = true,
                            MaxPlayers = 11,
                            Name = "Field Hockey"
                        });
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Tactic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArenaPart");

                    b.Property<string>("Name");

                    b.Property<int>("PlayerSize");

                    b.Property<int>("SportId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.HasIndex("UserId");

                    b.ToTable("Tactics");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EmptyGoal");

                    b.Property<int?>("GoalKeeperColorId");

                    b.Property<int>("PlayerColorId");

                    b.HasKey("Id");

                    b.HasIndex("GoalKeeperColorId");

                    b.HasIndex("PlayerColorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Ball", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("MagnetCoach.Domain.Models.Position", "Position", b1 =>
                        {
                            b1.Property<int>("BallId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("PositionX");

                            b1.Property<double>("PositionY");

                            b1.HasKey("BallId");

                            b1.ToTable("Balls");

                            b1.HasOne("MagnetCoach.Domain.Models.Ball")
                                .WithOne("Position")
                                .HasForeignKey("MagnetCoach.Domain.Models.Position", "BallId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Formation", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Sport", "Sport")
                        .WithMany("Formations")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.FormationLine", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Formation", "Formation")
                        .WithMany("Lines")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Frame", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Ball", "Ball")
                        .WithMany()
                        .HasForeignKey("BallId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MagnetCoach.Domain.Models.Team", "OpponentTeam")
                        .WithMany()
                        .HasForeignKey("OpponentTeamId");

                    b.HasOne("MagnetCoach.Domain.Models.Team", "OwnTeam")
                        .WithMany()
                        .HasForeignKey("OwnTeamId");

                    b.HasOne("MagnetCoach.Domain.Models.Tactic", "Tactic")
                        .WithMany("Frames")
                        .HasForeignKey("TacticId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Player", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("MagnetCoach.Domain.Models.Position", "Position", b1 =>
                        {
                            b1.Property<int>("PlayerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("PositionX");

                            b1.Property<double>("PositionY");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.HasOne("MagnetCoach.Domain.Models.Player")
                                .WithOne("Position")
                                .HasForeignKey("MagnetCoach.Domain.Models.Position", "PlayerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Tactic", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MagnetCoach.Domain.Models.User", "User")
                        .WithMany("Tactics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MagnetCoach.Domain.Models.Team", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.Color", "GoalKeeperColor")
                        .WithMany()
                        .HasForeignKey("GoalKeeperColorId");

                    b.HasOne("MagnetCoach.Domain.Models.Color", "PlayerColor")
                        .WithMany()
                        .HasForeignKey("PlayerColorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MagnetCoach.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MagnetCoach.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
